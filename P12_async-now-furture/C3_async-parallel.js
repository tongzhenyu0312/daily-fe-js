/**
 * 异步与并行
 * 异步描述 现在和将来
 * 并行描述 同时发生
 * 
 * 并行常与 线程与进程相关
 * 多线程会可以共享内存地址，因此加入JS是并行线程操作，那么很有可能多线程会在同一时间操作同一内存地址
 * 这样就会导致 结果的不确定
 * 
 * 因此决定了 JS是单线程，从不用多线程访问共享内存
 */

function foo() { 
  // ...
}

function bar() { 
  // ...
}

ajax('/foo', foo);
ajax('/bar', bar);


/**
 * 完整运行 run-to-completion
 * JS的单线程还有一个特点，就是如果一个已经摘出事件循环队列中的一段将来代码在执行，就会等执行完毕才会执行下一个。
 * 比如：如果foo先执行，那么不管foo代码多长，都会等到foo执行完毕，bar才会执行。
 */